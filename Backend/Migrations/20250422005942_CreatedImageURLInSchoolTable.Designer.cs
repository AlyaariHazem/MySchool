// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250422005942_CreatedImageURLInSchoolTable")]
    partial class CreatedImageURLInSchoolTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.AccountStudentGuardian", b =>
                {
                    b.Property<int>("AccountStudentGuardianID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountStudentGuardianID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GuardianID")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("AccountStudentGuardianID");

                    b.HasIndex("AccountID");

                    b.HasIndex("GuardianID");

                    b.HasIndex("StudentID");

                    b.ToTable("AccountStudentGuardians");
                });

            modelBuilder.Entity("Backend.Models.Accounts", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OpenBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<int>("TypeAccountID")
                        .HasColumnType("int");

                    b.Property<bool>("TypeOpenBalance")
                        .HasColumnType("bit");

                    b.HasKey("AccountID");

                    b.HasIndex("TypeAccountID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "007266f8-a4b4-4b9e-a8d2-3e0a6f9df5ec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0532ad00-74be-4463-a40b-aa67d358cdbc",
                            Email = "ADMIN@GMAIL.COM",
                            EmailConfirmed = true,
                            Gender = "",
                            HireDate = new DateTime(2025, 4, 22, 3, 59, 39, 410, DateTimeKind.Local).AddTicks(1788),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEAIjqonqPZ25iNFUwHNzM8uYj4dKCmNw5C4AXgiFCqvYXf4T5iJWgeOpIYK8YVwVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4cc4a64-3c32-4c1c-8371-b5827d599ebd",
                            TwoFactorEnabled = false,
                            UserName = "ADMIN",
                            UserType = "ADMIN"
                        });
                });

            modelBuilder.Entity("Backend.Models.Attachments", b =>
                {
                    b.Property<int>("AttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentID"));

                    b.Property<string>("AttachmentURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.Property<int?>("VoucherID")
                        .HasColumnType("int");

                    b.HasKey("AttachmentID");

                    b.HasIndex("StudentID");

                    b.HasIndex("VoucherID");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Backend.Models.Class", b =>
                {
                    b.Property<int>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassID"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<int?>("YearID")
                        .HasColumnType("int");

                    b.HasKey("ClassID");

                    b.HasIndex("StageID");

                    b.HasIndex("YearID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Backend.Models.CoursePlan", b =>
                {
                    b.Property<int>("YearID")
                        .HasColumnType("int");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int>("DivisionID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.Property<int>("TermID")
                        .HasColumnType("int");

                    b.HasKey("YearID", "TeacherID", "ClassID", "DivisionID", "SubjectID");

                    b.HasIndex("ClassID");

                    b.HasIndex("DivisionID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("TeacherID");

                    b.HasIndex("TermID");

                    b.ToTable("CoursePlans");
                });

            modelBuilder.Entity("Backend.Models.Curriculum", b =>
                {
                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<string>("CurriculumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectID", "ClassID");

                    b.HasIndex("ClassID");

                    b.ToTable("Curriculums");
                });

            modelBuilder.Entity("Backend.Models.Division", b =>
                {
                    b.Property<int>("DivisionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DivisionID"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("DivisionID");

                    b.HasIndex("ClassID");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("Backend.Models.Fee", b =>
                {
                    b.Property<int>("FeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeID"));

                    b.Property<string>("FeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeeNameAlis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("FeeID");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("Backend.Models.FeeClass", b =>
                {
                    b.Property<int>("FeeClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeClassID"));

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int>("FeeID")
                        .HasColumnType("int");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("bit");

                    b.HasKey("FeeClassID");

                    b.HasIndex("ClassID");

                    b.HasIndex("FeeID");

                    b.ToTable("FeeClass");
                });

            modelBuilder.Entity("Backend.Models.GradeType", b =>
                {
                    b.Property<int>("GradeTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeTypeID"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxGrade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GradeTypeID");

                    b.ToTable("GradeTypes");

                    b.HasData(
                        new
                        {
                            GradeTypeID = 1,
                            IsActive = true,
                            MaxGrade = 20m,
                            Name = "Assignments"
                        },
                        new
                        {
                            GradeTypeID = 2,
                            IsActive = true,
                            MaxGrade = 20m,
                            Name = "Attendance"
                        },
                        new
                        {
                            GradeTypeID = 3,
                            IsActive = true,
                            MaxGrade = 10m,
                            Name = "Participation"
                        },
                        new
                        {
                            GradeTypeID = 4,
                            IsActive = true,
                            MaxGrade = 10m,
                            Name = "Oral"
                        },
                        new
                        {
                            GradeTypeID = 5,
                            IsActive = true,
                            MaxGrade = 40m,
                            Name = "Exam"
                        },
                        new
                        {
                            GradeTypeID = 6,
                            IsActive = false,
                            MaxGrade = 20m,
                            Name = "work"
                        },
                        new
                        {
                            GradeTypeID = 7,
                            IsActive = false,
                            MaxGrade = 30m,
                            Name = "lab"
                        },
                        new
                        {
                            GradeTypeID = 8,
                            IsActive = false,
                            MaxGrade = 20m,
                            Name = "skills"
                        });
                });

            modelBuilder.Entity("Backend.Models.Guardian", b =>
                {
                    b.Property<int>("GuardianID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuardianID"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GuardianDOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GuardianID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Guardians");
                });

            modelBuilder.Entity("Backend.Models.Manager", b =>
                {
                    b.Property<int>("ManagerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerID"));

                    b.Property<int>("SchoolID")
                        .HasColumnType("int");

                    b.Property<int?>("TenantID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ManagerID");

                    b.HasIndex("SchoolID")
                        .IsUnique();

                    b.HasIndex("TenantID")
                        .IsUnique()
                        .HasFilter("[TenantID] IS NOT NULL");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Backend.Models.Month", b =>
                {
                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MonthID");

                    b.ToTable("Months");

                    b.HasData(
                        new
                        {
                            MonthID = 1,
                            Name = "يناير"
                        },
                        new
                        {
                            MonthID = 2,
                            Name = "فبراير"
                        },
                        new
                        {
                            MonthID = 3,
                            Name = "مارس"
                        },
                        new
                        {
                            MonthID = 4,
                            Name = "أبريل"
                        },
                        new
                        {
                            MonthID = 5,
                            Name = "مايو"
                        },
                        new
                        {
                            MonthID = 6,
                            Name = "يونيو"
                        },
                        new
                        {
                            MonthID = 7,
                            Name = "يوليو"
                        },
                        new
                        {
                            MonthID = 8,
                            Name = "أغسطس"
                        },
                        new
                        {
                            MonthID = 9,
                            Name = "سبتمبر"
                        },
                        new
                        {
                            MonthID = 10,
                            Name = "أكتوبر"
                        },
                        new
                        {
                            MonthID = 11,
                            Name = "نوفمبر"
                        },
                        new
                        {
                            MonthID = 12,
                            Name = "ديسمبر"
                        });
                });

            modelBuilder.Entity("Backend.Models.MonthlyGrade", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("YearID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<int>("GradeTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int>("TermID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StudentID", "YearID", "SubjectID", "MonthID", "GradeTypeID", "ClassID", "TermID");

                    b.HasIndex("ClassID");

                    b.HasIndex("GradeTypeID");

                    b.HasIndex("MonthID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("TermID");

                    b.HasIndex("YearID");

                    b.HasIndex("StudentID", "SubjectID", "MonthID", "GradeTypeID")
                        .IsUnique();

                    b.ToTable("MonthlyGrades");
                });

            modelBuilder.Entity("Backend.Models.Salary", b =>
                {
                    b.Property<int>("SalaryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalaryID"));

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalaryAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("SalaryHireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SalaryMonth")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.HasKey("SalaryID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Salarys");
                });

            modelBuilder.Entity("Backend.Models.School", b =>
                {
                    b.Property<int>("SchoolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolGoal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolMission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolPhone")
                        .HasColumnType("int");

                    b.Property<string>("SchoolType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolVison")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("fax")
                        .HasColumnType("int");

                    b.Property<string>("zone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolID");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("Backend.Models.Stage", b =>
                {
                    b.Property<int>("StageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StageID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearID")
                        .HasColumnType("int");

                    b.HasKey("StageID");

                    b.HasIndex("YearID");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("Backend.Models.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("DivisionID")
                        .HasColumnType("int");

                    b.Property<int>("GuardianID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1012);

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StudentDOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentID");

                    b.HasIndex("DivisionID");

                    b.HasIndex("GuardianID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Backend.Models.StudentClassFees", b =>
                {
                    b.Property<int>("StudentClassFeesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentClassFeesID"));

                    b.Property<decimal?>("AmountDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FeeClassID")
                        .HasColumnType("int");

                    b.Property<bool?>("Mandatory")
                        .HasColumnType("bit");

                    b.Property<string>("NoteDiscount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("StudentClassFeesID");

                    b.HasIndex("FeeClassID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentClassFees");
                });

            modelBuilder.Entity("Backend.Models.Subject", b =>
                {
                    b.Property<int>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectID"));

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectReplacement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Backend.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherID"));

                    b.Property<int>("ManagerID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TeacherID");

                    b.HasIndex("ManagerID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Backend.Models.Tenant", b =>
                {
                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenantId"));

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Backend.Models.Term", b =>
                {
                    b.Property<int>("TermID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TermID");

                    b.ToTable("Terms");

                    b.HasData(
                        new
                        {
                            TermID = 1,
                            Name = "الأول"
                        },
                        new
                        {
                            TermID = 2,
                            Name = "الثاني"
                        });
                });

            modelBuilder.Entity("Backend.Models.TermlyGrade", b =>
                {
                    b.Property<int>("TermlyGradeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermlyGradeID"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.Property<int>("TermID")
                        .HasColumnType("int");

                    b.Property<int>("YearID")
                        .HasColumnType("int");

                    b.HasKey("TermlyGradeID");

                    b.HasIndex("ClassID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("TermID");

                    b.HasIndex("YearID");

                    b.HasIndex("StudentID", "TermID", "SubjectID", "ClassID")
                        .IsUnique();

                    b.ToTable("TermlyGrades");
                });

            modelBuilder.Entity("Backend.Models.TypeAccount", b =>
                {
                    b.Property<int>("TypeAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeAccountID"));

                    b.Property<string>("TypeAccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeAccountID");

                    b.ToTable("TypeAccounts");

                    b.HasData(
                        new
                        {
                            TypeAccountID = 1,
                            TypeAccountName = "Guardain"
                        },
                        new
                        {
                            TypeAccountID = 2,
                            TypeAccountName = "School"
                        },
                        new
                        {
                            TypeAccountID = 3,
                            TypeAccountName = "Branches"
                        },
                        new
                        {
                            TypeAccountID = 4,
                            TypeAccountName = "Funds"
                        },
                        new
                        {
                            TypeAccountID = 5,
                            TypeAccountName = "Employees"
                        },
                        new
                        {
                            TypeAccountID = 6,
                            TypeAccountName = "Banks"
                        });
                });

            modelBuilder.Entity("Backend.Models.Vouchers", b =>
                {
                    b.Property<int>("VoucherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoucherID"));

                    b.Property<int>("AccountStudentGuardianID")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Receipt")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("VoucherID");

                    b.HasIndex("AccountStudentGuardianID");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Backend.Models.Year", b =>
                {
                    b.Property<int>("YearID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YearID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SchoolID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("YearDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("YearDateStart")
                        .HasColumnType("datetime2");

                    b.HasKey("YearID");

                    b.HasIndex("SchoolID");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("Backend.Models.YearTermMonth", b =>
                {
                    b.Property<int>("YearID")
                        .HasColumnType("int");

                    b.Property<int>("TermID")
                        .HasColumnType("int");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.HasKey("YearID", "TermID", "MonthID");

                    b.HasIndex("MonthID");

                    b.HasIndex("TermID");

                    b.ToTable("YearTermMonths");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "MANAGER",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "STUDENT",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "4",
                            Name = "TEACHER",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "5",
                            Name = "GUARDIAN",
                            NormalizedName = "GUARDIAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Models.AccountStudentGuardian", b =>
                {
                    b.HasOne("Backend.Models.Accounts", "Accounts")
                        .WithMany("AccountStudentGuardians")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Guardian", "Guardian")
                        .WithMany("AccountStudentGuardians")
                        .HasForeignKey("GuardianID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Student", "Student")
                        .WithMany("AccountStudentGuardians")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accounts");

                    b.Navigation("Guardian");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Backend.Models.Accounts", b =>
                {
                    b.HasOne("Backend.Models.TypeAccount", "TypeAccount")
                        .WithMany("Accounts")
                        .HasForeignKey("TypeAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeAccount");
                });

            modelBuilder.Entity("Backend.Models.Attachments", b =>
                {
                    b.HasOne("Backend.Models.Student", "Student")
                        .WithMany("Attachments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Models.Vouchers", "Vouchers")
                        .WithMany("Attachments")
                        .HasForeignKey("VoucherID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Student");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Backend.Models.Class", b =>
                {
                    b.HasOne("Backend.Models.Stage", "Stage")
                        .WithMany("Classes")
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Year", "Year")
                        .WithMany("Classes")
                        .HasForeignKey("YearID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Stage");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Backend.Models.CoursePlan", b =>
                {
                    b.HasOne("Backend.Models.Class", "Class")
                        .WithMany("CoursePlans")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Division", "Division")
                        .WithMany("CoursePlans")
                        .HasForeignKey("DivisionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Subject", "Subject")
                        .WithMany("CoursePlans")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Teacher", "Teacher")
                        .WithMany("CoursePlans")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Term", "Term")
                        .WithMany("CoursePlans")
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Year", "Year")
                        .WithMany("CoursePlans")
                        .HasForeignKey("YearID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Division");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");

                    b.Navigation("Term");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Backend.Models.Curriculum", b =>
                {
                    b.HasOne("Backend.Models.Class", "Class")
                        .WithMany("Curriculums")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Subject", "Subject")
                        .WithMany("Curriculums")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Backend.Models.Division", b =>
                {
                    b.HasOne("Backend.Models.Class", "Class")
                        .WithMany("Divisions")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Backend.Models.FeeClass", b =>
                {
                    b.HasOne("Backend.Models.Class", "Class")
                        .WithMany("FeeClasses")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Fee", "Fee")
                        .WithMany("FeeClasses")
                        .HasForeignKey("FeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Fee");
                });

            modelBuilder.Entity("Backend.Models.Guardian", b =>
                {
                    b.HasOne("Backend.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Guardian")
                        .HasForeignKey("Backend.Models.Guardian", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Backend.Models.Manager", b =>
                {
                    b.HasOne("Backend.Models.School", "School")
                        .WithOne("Manager")
                        .HasForeignKey("Backend.Models.Manager", "SchoolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Tenant", "Tenant")
                        .WithOne("Manager")
                        .HasForeignKey("Backend.Models.Manager", "TenantID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Manager")
                        .HasForeignKey("Backend.Models.Manager", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Backend.Models.Name", "FullName", b1 =>
                        {
                            b1.Property<int>("ManagerID")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MiddleName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ManagerID");

                            b1.ToTable("Managers");

                            b1.WithOwner()
                                .HasForeignKey("ManagerID");
                        });

                    b.Navigation("ApplicationUser");

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Backend.Models.MonthlyGrade", b =>
                {
                    b.HasOne("Backend.Models.Class", "Class")
                        .WithMany("MonthlyGrades")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.GradeType", "GradeType")
                        .WithMany("MonthlyGrades")
                        .HasForeignKey("GradeTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Month", "Month")
                        .WithMany("MonthlyGrades")
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Student", "Student")
                        .WithMany("MonthlyGrades")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Subject", "Subject")
                        .WithMany("MonthlyGrades")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Term", "Term")
                        .WithMany("MonthlyGrades")
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Year", "Year")
                        .WithMany("MonthlyGrades")
                        .HasForeignKey("YearID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("GradeType");

                    b.Navigation("Month");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Term");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Backend.Models.Salary", b =>
                {
                    b.HasOne("Backend.Models.Teacher", "Teacher")
                        .WithMany("Salaries")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Backend.Models.Stage", b =>
                {
                    b.HasOne("Backend.Models.Year", "Year")
                        .WithMany("Stages")
                        .HasForeignKey("YearID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Backend.Models.Student", b =>
                {
                    b.HasOne("Backend.Models.Division", "Division")
                        .WithMany("Students")
                        .HasForeignKey("DivisionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Guardian", "Guardian")
                        .WithMany("Students")
                        .HasForeignKey("GuardianID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Student")
                        .HasForeignKey("Backend.Models.Student", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Backend.Models.NameAlis", "FullNameAlis", b1 =>
                        {
                            b1.Property<int>("StudentID")
                                .HasColumnType("int");

                            b1.Property<string>("FirstNameEng")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastNameEng")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MiddleNameEng")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StudentID");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentID");
                        });

                    b.OwnsOne("Backend.Models.Name", "FullName", b1 =>
                        {
                            b1.Property<int>("StudentID")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MiddleName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StudentID");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentID");
                        });

                    b.Navigation("ApplicationUser");

                    b.Navigation("Division");

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("FullNameAlis");

                    b.Navigation("Guardian");
                });

            modelBuilder.Entity("Backend.Models.StudentClassFees", b =>
                {
                    b.HasOne("Backend.Models.FeeClass", "FeeClass")
                        .WithMany("StudentClassFees")
                        .HasForeignKey("FeeClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Student", "Student")
                        .WithMany("StudentClassFees")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FeeClass");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Backend.Models.Teacher", b =>
                {
                    b.HasOne("Backend.Models.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Teacher")
                        .HasForeignKey("Backend.Models.Teacher", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Backend.Models.Name", "FullName", b1 =>
                        {
                            b1.Property<int>("TeacherID")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MiddleName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TeacherID");

                            b1.ToTable("Teachers");

                            b1.WithOwner()
                                .HasForeignKey("TeacherID");
                        });

                    b.Navigation("ApplicationUser");

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Backend.Models.TermlyGrade", b =>
                {
                    b.HasOne("Backend.Models.Class", "Class")
                        .WithMany("TermlyGrades")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Student", "Student")
                        .WithMany("TermlyGrades")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Subject", "Subject")
                        .WithMany("TermlyGrades")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Term", "Term")
                        .WithMany("TermlyGrades")
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Year", "Year")
                        .WithMany("TermlyGrades")
                        .HasForeignKey("YearID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Term");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Backend.Models.Vouchers", b =>
                {
                    b.HasOne("Backend.Models.AccountStudentGuardian", "AccountStudentGuardians")
                        .WithMany("Vouchers")
                        .HasForeignKey("AccountStudentGuardianID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountStudentGuardians");
                });

            modelBuilder.Entity("Backend.Models.Year", b =>
                {
                    b.HasOne("Backend.Models.School", "School")
                        .WithMany("Years")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Backend.Models.YearTermMonth", b =>
                {
                    b.HasOne("Backend.Models.Month", "Month")
                        .WithMany("YearTermMonths")
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Term", "Term")
                        .WithMany("YearTermMonths")
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Year", "Year")
                        .WithMany("YearTermMonths")
                        .HasForeignKey("YearID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Month");

                    b.Navigation("Term");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.AccountStudentGuardian", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Backend.Models.Accounts", b =>
                {
                    b.Navigation("AccountStudentGuardians");
                });

            modelBuilder.Entity("Backend.Models.ApplicationUser", b =>
                {
                    b.Navigation("Guardian");

                    b.Navigation("Manager");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Backend.Models.Class", b =>
                {
                    b.Navigation("CoursePlans");

                    b.Navigation("Curriculums");

                    b.Navigation("Divisions");

                    b.Navigation("FeeClasses");

                    b.Navigation("MonthlyGrades");

                    b.Navigation("TermlyGrades");
                });

            modelBuilder.Entity("Backend.Models.Division", b =>
                {
                    b.Navigation("CoursePlans");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Backend.Models.Fee", b =>
                {
                    b.Navigation("FeeClasses");
                });

            modelBuilder.Entity("Backend.Models.FeeClass", b =>
                {
                    b.Navigation("StudentClassFees");
                });

            modelBuilder.Entity("Backend.Models.GradeType", b =>
                {
                    b.Navigation("MonthlyGrades");
                });

            modelBuilder.Entity("Backend.Models.Guardian", b =>
                {
                    b.Navigation("AccountStudentGuardians");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Backend.Models.Month", b =>
                {
                    b.Navigation("MonthlyGrades");

                    b.Navigation("YearTermMonths");
                });

            modelBuilder.Entity("Backend.Models.School", b =>
                {
                    b.Navigation("Manager")
                        .IsRequired();

                    b.Navigation("Years");
                });

            modelBuilder.Entity("Backend.Models.Stage", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("Backend.Models.Student", b =>
                {
                    b.Navigation("AccountStudentGuardians");

                    b.Navigation("Attachments");

                    b.Navigation("MonthlyGrades");

                    b.Navigation("StudentClassFees");

                    b.Navigation("TermlyGrades");
                });

            modelBuilder.Entity("Backend.Models.Subject", b =>
                {
                    b.Navigation("CoursePlans");

                    b.Navigation("Curriculums");

                    b.Navigation("MonthlyGrades");

                    b.Navigation("TermlyGrades");
                });

            modelBuilder.Entity("Backend.Models.Teacher", b =>
                {
                    b.Navigation("CoursePlans");

                    b.Navigation("Salaries");
                });

            modelBuilder.Entity("Backend.Models.Tenant", b =>
                {
                    b.Navigation("Manager")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.Term", b =>
                {
                    b.Navigation("CoursePlans");

                    b.Navigation("MonthlyGrades");

                    b.Navigation("TermlyGrades");

                    b.Navigation("YearTermMonths");
                });

            modelBuilder.Entity("Backend.Models.TypeAccount", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Backend.Models.Vouchers", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Backend.Models.Year", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("CoursePlans");

                    b.Navigation("MonthlyGrades");

                    b.Navigation("Stages");

                    b.Navigation("TermlyGrades");

                    b.Navigation("YearTermMonths");
                });
#pragma warning restore 612, 618
        }
    }
}
